Creating the backend using a Deployment
======
vi service/access/backend-deployment.yaml
-----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  selector:
    matchLabels:
      app: hello
      tier: backend
      track: stable
  replicas: 3
  template:
    metadata:
      labels:
        app: hello
        tier: backend
        track: stable
    spec:
      containers:
        - name: hello
          image: "gcr.io/google-samples/hello-go-gke:1.0"
          ports:
            - name: http
              containerPort: 80
...
=====

$ kubectl apply -f https://k8s.io/examples/service/access/backend-deployment.yaml
====
$ kubectl describe deployment backend
====

Creating the hello Service object 
====

vi service/access/backend-service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: hello
spec:
  selector:
    app: hello
    tier: backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: http
...
====Create the backend Service:

 $ kubectl apply -f https://k8s.io/examples/service/access/backend-service.yaml
 
 ====
 Creating the frontend
 ===
 
 vi service/access/frontend-nginx.conf
 ----
 # The identifier Backend is internal to nginx, and used to name this specific upstream
upstream Backend {
    # hello is the internal DNS name used by the backend Service inside Kubernetes
    server hello;
}

server {
    listen 80;

    location / {
        # The following statement will proxy traffic to the upstream named Backend
        proxy_pass http://Backend;
    }
    ====
    
 
vi service/access/frontend-service.yaml
-----
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: hello
    tier: frontend
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 80
  type: LoadBalancer
...
===
$ kubectl apply -f https://k8s.io/examples/service/access/frontend-service.yaml
===
vi service/access/frontend-deployment.yaml
----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: hello
      tier: frontend
      track: stable
  replicas: 1
  template:
    metadata:
      labels:
        app: hello
        tier: frontend
        track: stable
    spec:
      containers:
        - name: nginx
          image: "gcr.io/google-samples/hello-frontend:1.0"
          lifecycle:
            preStop:
              exec:
                command: ["/usr/sbin/nginx","-s","quit"]
...
====
$ kubectl apply -f https://k8s.io/examples/service/access/frontend-deployment.yaml
===
$ kubectl get service frontend --watch

===

The output shows the message generated by the backend:

{"message":"Hello"}

===
https://kubernetes.io/docs/tasks/access-application-cluster/connecting-frontend-backend/
====
